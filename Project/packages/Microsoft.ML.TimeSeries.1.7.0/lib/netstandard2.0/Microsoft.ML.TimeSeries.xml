<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ML.TimeSeries</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod">
            <summary>
            Ranking selection method for the signal.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.GrowthRatio">
            <summary>
            Growth ratio. Defined as Growth^(1/TimeSpan).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal">
            <summary>
            This class implements basic Singular Spectrum Analysis (SSA) model for modeling univariate time-series.
            For the details of the model, refer to http://arxiv.org/pdf/1206.6910.pdf.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.Spectrum">
            <summary>
            The singular values of the SSA of the input time-series
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.RootsAfterStabilization">
            <summary>
            The roots of the characteristic polynomial after stabilization (meaningful only if the model is stabilized.)
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.RootsBeforeStabilization">
            <summary>
            The roots of the characteristic polynomial before stabilization (meaningful only if the model is stabilized.)
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.Rank">
            <summary>
            The rank of the model
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.WindowSize">
            <summary>
            The window size used to compute the SSA model
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.AutoRegressiveCoefficients">
            <summary>
            The auto-regressive coefficients learned by the model
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.IsTrained">
            <summary>
            The flag indicating whether the model has been trained
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.IsNaiveModelTrained">
            <summary>
            The flag indicating a naive model is trained instead of SSA
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.IsExponentialTrendPresent">
            <summary>
            The flag indicating whether the learned model has an exponential trend (meaningful only if the model is stabilized.)
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.IsPolynomialTrendPresent">
            <summary>
            The flag indicating whether the learned model has a polynomial trend (meaningful only if the model is stabilized.)
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.IsStabilized">
            <summary>
            The flag indicating whether the learned model has been stabilized
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.IsArtificialSeasonalityRemoved">
            <summary>
            The flag indicating whether any artificial seasonality (a seasonality with period greater than the window size) is removed
            (meaningful only if the model is stabilized.)
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ModelInfo.ExponentialTrendFactor">
            <summary>
            The exponential trend magnitude (meaningful only if the model is stabilized.)
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.Info">
            <summary>
            Returns the meta information about the learned model.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ShouldComputeForecastIntervals">
            <summary>
            Determines whether the confidence interval required for forecasting.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.Rank">
            <summary>
            Returns the rank of the subspace used for SSA projection (parameter r).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.LastSmoothedValue">
            <summary>
            Returns the smoothed (via SSA projection) version of the last series observation fed to the model.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.LastValue">
            <summary>
            Returns the last series observation fed to the model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Int32,System.Int32,System.Int32,System.Single,Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Nullable{Microsoft.ML.Transforms.TimeSeries.GrowthRatio})">
            <summary>
            The constructor for Adaptive SSA model.
            </summary>
            <param name="env">The exception context.</param>
            <param name="trainSize">The length of series from the beginning used for training (parameter N).
            Must be at least twice the windowSize.</param>
            <param name="seriesLength">This parameter must be greater than windowSize.</param>
            <param name="windowSize">The length of the window on the series for building the trajectory matrix (parameter L).
            We recommend you set this to be more than twice the maximum seasonality in the data. For example,
            if your data can exhibit both monthly and yearly seasonality, and you have data points from each day,
            set this to be twice the number of days in a year.</param>
            <param name="discountFactor">The discount factor in [0,1] used for online updates (default = 1).</param>
            <param name="rankSelectionMethod">The rank selection method (default = Exact).</param>
            <param name="rank">The desired rank of the subspace used for SSA projection (parameter r). This parameter should be in the range in [1, windowSize].
            If set to null, the rank is automatically determined based on prediction error minimization. (default = null)</param>
            <param name="maxRank">The maximum rank considered during the rank selection process. If not provided (i.e. set to null), it is set to windowSize - 1.</param>
            <param name="shouldComputeForecastIntervals">The flag determining whether the confidence bounds for the point forecasts should be computed. (default = true)</param>
            <param name="shouldstablize">The flag determining whether the model should be stabilized.</param>
            <param name="shouldMaintainInfo">The flag determining whether the meta information for the model needs to be maintained.</param>
            <param name="maxGrowth">The maximum growth on the exponential trend.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.#ctor(Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal)">
            <summary>
            The copy constructor.
            </summary>
            <param name="model">An object whose contents are copied to the current object.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.Consume(System.Single@,System.Boolean)">
            <summary>
            Feeds the next observation on the series to the model and as a result changes the state of the model.
            </summary>
            <param name="input">The next observation on the series.</param>
            <param name="updateModel">Determines whether the model parameters also need to be updated upon consuming the new observation (default = false).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.Train(Microsoft.ML.Internal.Utilities.FixedSizeQueue{System.Single})">
            <summary>
            Train the model parameters based on a training series.
            </summary>
            <param name="data">The training time-series.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.Train(Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Train the model parameters based on a training series.
            </summary>
            <param name="data">The training time-series.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.Forecast(Microsoft.ML.Transforms.TimeSeries.ForecastResultBase{System.Single}@,System.Int32)">
            <summary>
            Forecasts the future values of the series up to the given horizon.
            </summary>
            <param name="result">The forecast result.</param>
            <param name="horizon">The forecast horizon.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.PredictNext(System.Single@)">
            <summary>
            Predicts the next value on the series.
            </summary>
            <param name="output">The prediction result.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.ComputeForecastIntervals(Microsoft.ML.Transforms.TimeSeries.AdaptiveSingularSpectrumSequenceModelerInternal.SsaForecastResult@,System.Single)">
            <summary>
            Computes the forecast intervals for the input forecast object at the given confidence level. The results are stored in the forecast object.
            </summary>
            <param name="forecast">The input forecast object</param>
            <param name="confidenceLevel">The confidence level in [0, 1)</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.ExponentialAverageTransform">
            <summary>
            ExponentialAverageTransform is a weighted average of the values: ExpAvg(y_t) = a * y_t + (1-a) * ExpAvg(y_(t-1)).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.FftUtils">
            <summary>
            The utility functions that wrap the native Discrete Fast Fourier Transform functionality from Intel MKL.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.FftUtils.ComputeForwardFft(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Computes the forward Fast Fourier Transform of the input series in single precision.
            </summary>
            <param name="inputRe">The real part of the input series</param>
            <param name="inputIm">The imaginary part of the input series</param>
            <param name="outputRe">The real part of the output series</param>
            <param name="outputIm">The imaginary part of the output series</param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.FftUtils.ComputeBackwardFft(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Computes the backward (inverse) Fast Fourier Transform of the input series in single precision.
            </summary>
            <param name="inputRe">The real part of the input series</param>
            <param name="inputIm">The imaginary part of the input series</param>
            <param name="outputRe">The real part of the output series</param>
            <param name="outputIm">The imaginary part of the output series</param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.FftUtils.ComputeForwardFft(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Computes the forward Fast Fourier Transform of the input series in double precision.
            </summary>
            <param name="inputRe">The real part of the input series</param>
            <param name="inputIm">The imaginary part of the input series</param>
            <param name="outputRe">The real part of the output series</param>
            <param name="outputIm">The imaginary part of the output series</param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.FftUtils.ComputeBackwardFft(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Computes the backward (inverse) Fast Fourier Transform of the input series in double precision.
            </summary>
            <param name="inputRe">The real part of the input series</param>
            <param name="inputIm">The imaginary part of the input series</param>
            <param name="outputRe">The real part of the output series</param>
            <param name="outputIm">The imaginary part of the output series</param>
            <param name="length"></param>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper">
            <summary>
            The is the wrapper to <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.IidAnomalyDetectionBase"/> that computes the p-values and martingale scores for a supposedly i.i.d input sequence of floats. In other words, it assumes
            the input sequence represents the raw anomaly score which might have been computed via another process.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.Microsoft#ML#ITransformer#IsRowToRowMapper">
            <summary>
            Whether a call to <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> should succeed, on an
            appropriate schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.Microsoft#ML#Transforms#TimeSeries#IStatefulTransformer#Clone">
            <summary>
            Create a clone of the transformer. Used for taking the snapshot of the state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Constructs a row-to-row mapper based on an input schema. If <see cref="P:Microsoft.ML.ITransformer.IsRowToRowMapper"/>
            is <c>false</c>, then an exception should be thrown. If the input schema is in any way
            unsuitable for constructing the mapper, an exception should likewise be thrown.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.GetStatefulRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Same as <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> but also supports mechanism to save the state.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.Transform(Microsoft.ML.IDataView)">
            <summary>
            Take the data in, make transformations, output the data.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual transformations happen here, just schema validation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.Microsoft#ML#ICanSaveModel#Save(Microsoft.ML.ModelSaveContext)">
            <summary>
            For saving a model into a repository.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.MakeRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Creates a row mapper from Schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.MakeDataTransform(Microsoft.ML.IDataView)">
            <summary>
            Creates an IDataTransform from an IDataView.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.IidAnomalyDetectionBase">
            <summary>
            This transform computes the p-values and martingale scores for a supposedly i.i.d input sequence of floats. In other words, it assumes
            the input sequence represents the raw anomaly score which might have been computed via another process.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.IidChangePointDetector">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator">
             <summary>
             Detect a signal change on an
             <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables"> independent identically distributed (i.i.d.)</a>
             time series based on adaptive kernel density estimation and martingales.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this estimator, use [DetectIidChangePoint](xref:Microsoft.ML.TimeSeriesCatalog.DetectIidChangePoint(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-time-series-change-point.md)]
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | <xref:System.Single> |
             | Output column data type | 4-element vector of<xref:System.Double> |
             | Exportable to ONNX | No |
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-props.md)]
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-iid.md)]
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-scorer.md)]
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TimeSeriesCatalog.DetectIidChangePoint(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)" />
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Double,System.Int32,System.String,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator"/>
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            Column is a vector of type double and size 4. The vector contains Alert, Raw Score, P-Value and Martingale score as first four values.</param>
            <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
            <param name="changeHistoryLength">The length of the sliding window on p-values for computing the martingale score.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="martingale">The martingale used for scoring.</param>
            <param name="eps">The epsilon parameter for the Power martingale.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.IidSpikeDetector">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator">
             <summary>
             Detect a signal spike on an
             <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables"> independent identically distributed (i.i.d.)</a>
             time series based on adaptive kernel density estimation.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this estimator, use [DetectIidSpike](xref:Microsoft.ML.TimeSeriesCatalog.DetectIidSpike(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-time-series-spike.md)]
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | <xref:System.Single> |
             | Output column data type | 3-element vector of<xref:System.Double> |
             | Exportable to ONNX | No |
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-props.md)]
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-iid.md)]
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-pvalue.md)]
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TimeSeriesCatalog.DetectIidSpike(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide)" />
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Double,System.Int32,System.String,Microsoft.ML.Transforms.TimeSeries.AnomalySide)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator"/>
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            Column is a vector of type double and size 4. The vector contains Alert, Raw Score, P-Value as first three values.</param>
            <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
            <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.MovingAverageTransform">
            <summary>
            MovingAverageTransform is a weighted average of the values in
            the sliding window.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.MovingAverageTransform.ComputeMovingAverageUniform(Microsoft.ML.Internal.Utilities.FixedSizeQueue{System.Single},System.Single,System.Int32,System.Single,System.Single@,System.Boolean@,System.Int32@)">
             <summary>
             Possible returns:
            
             Finite Value: no infinite value in the sliding window and at least a non NaN value
             NaN value: only NaN values in the sliding window or +/- Infinite
             Inifinite value: one infinite value in the sliding window (sign is no relevant)
             </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.MovingAverageTransform.State.TransformCore(System.Single@,Microsoft.ML.Internal.Utilities.FixedSizeQueue{System.Single},System.Int64,System.Single@)">
            <summary>
            input is not included
            </summary>
            <param name="input"></param>
            <param name="windowedBuffer"></param>
            <param name="iteration"></param>
            <param name="output"></param>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.PercentileThresholdTransform">
            <summary>
            PercentileThresholdTransform is a sequential transform that decides whether the current value of the time-series belongs to the 'percentile' % of the top values in
            the sliding window. The output of the transform will be a boolean flag.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.PercentileThresholdTransform.State._parent">
            <summary>
            The number of elements in the top 'percentile' % of the top values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.PolynomialUtils.FindPolynomialRoots(System.Double[],System.Numerics.Complex[]@,System.Int32,System.Double)">
            <summary>
            Computes the real and the complex roots of a real monic polynomial represented as:
            coefficients[0] + coefficients[1] * X + coefficients[2] * X^2 + ... + coefficients[n-1] * X^(n-1) + X^n
            by computing the eigenvalues of the Companion matrix. (https://en.wikipedia.org/wiki/Companion_matrix)
            </summary>
            <param name="coefficients">The monic polynomial coefficients in the ascending order</param>
            <param name="roots">The computed (complex) roots</param>
            <param name="roundOffDigits">The number decimal digits to keep after round-off</param>
            <param name="doublePrecision">The machine precision</param>
            <returns>A boolean flag indicating whether the algorithm was successful.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.PolynomialUtils.FindPolynomialCoefficients(System.Numerics.Complex[],System.Double[]@)">
             <summary>
             Computes the coefficients of a real monic polynomial given its real and complex roots.
             The final monic polynomial is represented as:
             coefficients[0] + coefficients[1] * X + coefficients[2] * X^2 + ... + coefficients[n-1] * X^(n-1) + X^n
            
             Note: the constant 1 coefficient of the highest degree term is implicit and not included in the output of the method.
             </summary>
             <param name="roots">The input (complex) roots</param>
             <param name="coefficients">The output real coefficients</param>
             <returns>A boolean flag indicating whether the algorithm was successful.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IStatefulTransformer.GetStatefulRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Same as <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> but also supports mechanism to save the state.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.IStatefulTransformer.Clone">
            <summary>
            Creates a clone of the transfomer. Used for taking the snapshot of the state.
            This is used to create multiple time series with their own state.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2">
            <summary>
            A class that runs the previously trained model (and the preceding transform pipeline) on the
            in-memory data, one example at a time.
            This can also be used with trained pipelines that do not end with a predictor: in this case, the
            'prediction' will be just the outcome of all the transformations.
            </summary>
            <typeparam name="TSrc">The user-defined type that holds the example.</typeparam>
            <typeparam name="TDst">The user-defined type that holds the prediction.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.CheckPoint(Microsoft.ML.Runtime.IHostEnvironment,System.String)">
            <summary>
            Checkpoints <see cref="T:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2"/> to disk with the updated
            state.
            </summary>
            <param name="env">Usually <see cref="T:Microsoft.ML.MLContext"/>.</param>
            <param name="modelPath">Path to file on disk where the updated model needs to be saved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            This is an example for checkpointing time series that detects change point using Singular Spectrum Analysis (SSA) model.
            [!code-csharp[Checkpoint](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectChangePointBySsa.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.CheckPoint(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Checkpoints <see cref="T:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2"/> to a <see cref="T:System.IO.Stream"/> with the updated
            state.
            </summary>
            <param name="env">Usually <see cref="T:Microsoft.ML.MLContext"/>.</param>
            <param name="stream">Stream where the updated model needs to be saved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            This is an example for checkpointing time series that detects change point using Singular Spectrum Analysis (SSA) model.
            [!code-csharp[Checkpoint](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectChangePointBySsaStream.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ITransformer,System.Boolean,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            Contructor for creating time series specific prediction engine. It allows the time series model to be updated with the observations
            seen at prediction time via <see cref="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.CheckPoint(Microsoft.ML.Runtime.IHostEnvironment,System.String)"/>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ITransformer,Microsoft.ML.PredictionEngineOptions)">
            <summary>
            Contructor for creating time series specific prediction engine. It allows the time series model to be updated with the observations
            seen at prediction time via <see cref="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.CheckPoint(Microsoft.ML.Runtime.IHostEnvironment,System.String)"/>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.Predict(`0,`1@,System.Nullable{System.Int32},System.Nullable{System.Single})">
            <summary>
            Performs prediction. In the case of forecasting only task <paramref name="example"/> can be left as null.
            If <paramref name="example"/> is not null then it could be used to update forecasting models with new obervation.
            For anomaly detection the model is always updated with <paramref name="example"/>.
            </summary>
            <param name="example">Input to the prediction engine.</param>
            <param name="prediction">Forecasting/Prediction from the engine.</param>
            <param name="horizon">Used to indicate the number of values to forecast.</param>
            <param name="confidenceLevel">Used in forecasting model for confidence.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.Predict(`0,`1@)">
            <summary>
            Performs prediction. In the case of forecasting only task <paramref name="example"/> can be left as null.
            If <paramref name="example"/> is not null then it could be used to update forecasting models with new obervation.
            For anomaly detection the model is always updated with <paramref name="example"/>.
            </summary>
            <param name="example">Input to the prediction engine.</param>
            <param name="prediction">Forecasting/Prediction from the engine.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.Predict(`0,System.Nullable{System.Int32},System.Nullable{System.Single})">
            <summary>
            Performs prediction. In the case of forecasting only task <paramref name="example"/> can be left as null.
            If <paramref name="example"/> is not null then it could be used to update forecasting models with new obervation.
            </summary>
            <param name="example">Input to the prediction engine.</param>
            <param name="horizon">Number of values to forecast.</param>
            <param name="confidenceLevel">Confidence level for forecasting.</param>
            <returns>Prediction/Forecasting after the model has been updated with <paramref name="example"/></returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2.Predict(System.Nullable{System.Int32},System.Nullable{System.Single})">
            <summary>
            Forecasting only task.
            </summary>
            <param name="horizon">Number of values to forecast.</param>
            <param name="confidenceLevel">Confidence level for forecasting.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.PredictionFunctionExtensions.CreateTimeSeriesEngine``2(Microsoft.ML.ITransformer,Microsoft.ML.Runtime.IHostEnvironment,System.Boolean,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            <see cref="T:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2"/> creates a prediction engine for a time series pipeline.
            It updates the state of time series model with observations seen at prediction phase and allows checkpointing the model.
            </summary>
            <typeparam name="TSrc">Class describing input schema to the model.</typeparam>
            <typeparam name="TDst">Class describing the output schema of the prediction.</typeparam>
            <param name="transformer">The time series pipeline in the form of a <see cref="T:Microsoft.ML.ITransformer"/>.</param>
            <param name="env">Usually <see cref="T:Microsoft.ML.MLContext"/></param>
            <param name="ignoreMissingColumns">To ignore missing columns. Default is false.</param>
            <param name="inputSchemaDefinition">Input schema definition. Default is null.</param>
            <param name="outputSchemaDefinition">Output schema definition. Default is null.</param>
            <p>Example code can be found by searching for <i>TimeSeriesPredictionEngine</i> in <a href='https://github.com/dotnet/machinelearning'>ML.NET.</a></p>
            <example>
            <format type="text/markdown">
            <![CDATA[
            This is an example for detecting change point using Singular Spectrum Analysis (SSA) model.
            [!code-csharp[MF](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectChangePointBySsa.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.PredictionFunctionExtensions.CreateTimeSeriesEngine``2(Microsoft.ML.ITransformer,Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.PredictionEngineOptions)">
            <summary>
            <see cref="T:Microsoft.ML.Transforms.TimeSeries.TimeSeriesPredictionEngine`2"/> creates a prediction engine for a time series pipeline.
            It updates the state of time series model with observations seen at prediction phase and allows checkpointing the model.
            </summary>
            <typeparam name="TSrc">Class describing input schema to the model.</typeparam>
            <typeparam name="TDst">Class describing the output schema of the prediction.</typeparam>
            <param name="transformer">The time series pipeline in the form of a <see cref="T:Microsoft.ML.ITransformer"/>.</param>
            <param name="env">Usually <see cref="T:Microsoft.ML.MLContext"/></param>
            <param name="options">Advanced configuration options.</param>
            <p>Example code can be found by searching for <i>TimeSeriesPredictionEngine</i> in <a href='https://github.com/dotnet/machinelearning'>ML.NET.</a></p>
            <example>
            <format type="text/markdown">
            <![CDATA[
            This is an example for detecting change point using Singular Spectrum Analysis (SSA) model.
            [!code-csharp[MF](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectChangePointBySsa.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.PValueTransform">
            <summary>
            PValueTransform is a sequential transform that computes the empirical p-value of the current value in the series based on the other values in
            the sliding window.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.ForecastResultBase`1">
            <summary>
            The base container class for the forecast result on a sequence of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequenceModelerBase`2">
            <summary>
            The standard interface for modeling a sequence.
            </summary>
            <typeparam name="TInput">The type of the elements in the input sequence</typeparam>
            <typeparam name="TOutput">The type of the elements in the output sequence</typeparam>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequenceModelerBase`2.InitState">
            <summary>
            Initializes the state of the modeler
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequenceModelerBase`2.Consume(`0@,System.Boolean)">
            <summary>
            Consumes one element from the input sequence.
            </summary>
            <param name="input">An element in the sequence</param>
            <param name="updateModel">determines whether the sequence model should be updated according to the input</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequenceModelerBase`2.Train(Microsoft.ML.Internal.Utilities.FixedSizeQueue{`0})">
            <summary>
            Trains the sequence model on a given sequence.
            </summary>
            <param name="data">The input sequence used for training</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequenceModelerBase`2.Train(Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Trains the sequence model on a given sequence. The method accepts an object of RoleMappedData,
            and assumes the input column is the 'Feature' column of type TInput.
            </summary>
            <param name="data">The input sequence used for training</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequenceModelerBase`2.Forecast(Microsoft.ML.Transforms.TimeSeries.ForecastResultBase{`1}@,System.Int32)">
            <summary>
            Forecasts the next 'horizon' elements in the output sequence.
            </summary>
            <param name="result">The forecast result for the given horizon along with optional information depending on the algorithm</param>
            <param name="horizon">The forecast horizon</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequenceModelerBase`2.PredictNext(`1@)">
            <summary>
            Predicts the next element in the output sequence.
            </summary>
            <param name="output">The output ref parameter the will contain the prediction result</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequenceModelerBase`2.Clone">
            <summary>
            Creates a clone of the model.
            </summary>
            <returns>A clone of the object</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequenceModelerBase`2.Microsoft#ML#ICanSaveModel#Save(Microsoft.ML.ModelSaveContext)">
            <summary>
            Implementation of <see cref="M:Microsoft.ML.ICanSaveModel.Save(Microsoft.ML.ModelSaveContext)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.MartingaleType">
            <summary>
            The type of the martingale.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.MartingaleType.None">
            <summary>
            (None) No martingale is used.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.MartingaleType.Power">
            <summary>
            (Power) The Power martingale is used.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.MartingaleType.Mixture">
            <summary>
            (Mixture) The Mixture martingale is used.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.AnomalySide">
            <summary>
            The side of anomaly detection.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AnomalySide.Positive">
            <summary>
            (Positive) Only positive anomalies are detected.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AnomalySide.Negative">
            <summary>
            (Negative) Only negative anomalies are detected.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AnomalySide.TwoSided">
            <summary>
            (TwoSided) Both positive and negative anomalies are detected.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.AlertingScore">
            <summary>
            The score that should be thresholded to generate alerts.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AlertingScore.RawScore">
            <summary>
            (RawScore) The raw anomaly score is thresholded.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AlertingScore.PValueScore">
            <summary>
            (PValueScore) The p-value score is thresholded.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.AlertingScore.MartingaleScore">
            <summary>
            (MartingaleScore) The martingale score is thresholded.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.ArgumentsBase">
            <summary>
            The base class that can be inherited by the 'Argument' classes in the derived classes containing the shared input parameters.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialAnomalyDetectionTransformBase`2">
            <summary>
            The base class for sequential anomaly detection transforms that supports the p-value as well as the martingales scores computation from the sequence of
            raw anomaly scores whose calculation is specified by the children classes. This class also provides mechanism for the threshold-based alerting on
            the raw anomaly score, the p-value score or the martingale score. Currently, this class supports Power and Mixture martingales.
            For more details, please refer to http://arxiv.org/pdf/1204.3251.pdf
            </summary>
            <typeparam name="TInput">The type of the input sequence</typeparam>
            <typeparam name="TState">The type of the input sequence</typeparam>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialAnomalyDetectionTransformBase`2.LogPowerMartigaleBettingFunc(System.Double,System.Double)">
            <summary>
            Calculates the betting function for the Power martingale in the log scale.
            For more details, please refer to http://arxiv.org/pdf/1204.3251.pdf.
            </summary>
            <param name="p">The p-value</param>
            <param name="epsilon">The epsilon</param>
            <returns>The Power martingale betting function value in the natural logarithmic scale.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialAnomalyDetectionTransformBase`2.LogMixtureMartigaleBettingFunc(System.Double)">
            <summary>
            Calculates the betting function for the Mixture martingale in the log scale.
            For more details, please refer to http://arxiv.org/pdf/1204.3251.pdf.
            </summary>
            <param name="p">The p-value</param>
            <returns>The Mixure (marginalized over epsilon) martingale betting function value in the natural logarithmic scale.</returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialAnomalyDetectionTransformBase`2.AnomalyDetectionStateBase">
            <summary>
            The base state class for sequential anomaly detection: this class implements the p-values and martinagle calculations for anomaly detection
            given that the raw anomaly score calculation is specified by the derived classes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialAnomalyDetectionTransformBase`2.AnomalyDetectionStateBase.InitializeAnomalyDetector">
            <summary>
            The abstract method that realizes the initialization functionality for the anomaly detector.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialAnomalyDetectionTransformBase`2.AnomalyDetectionStateBase.ComputeRawAnomalyScore(`0@,Microsoft.ML.Internal.Utilities.FixedSizeQueue{`0},System.Int64)">
            <summary>
            The abstract method that realizes the main logic for calculating the raw anomaly score bfor the current input given a windowed buffer
            </summary>
            <param name="input">A reference to the input object.</param>
            <param name="windowedBuffer">A reference to the windowed buffer.</param>
            <param name="iteration">A long number that indicates the number of times ComputeRawAnomalyScore has been called so far (starting value = 0).</param>
            <returns>The raw anomaly score for the input. The Assumption is the higher absolute value of the raw score, the more anomalous the input is.
            The sign of the score determines whether it's a positive anomaly or a negative one.</returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.ForecastingArgumentsBase">
            <summary>
            The base class that can be inherited by the 'Argument' classes in the derived classes containing the shared input parameters.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialForecastingTransformBase`2">
            <summary>
            The base class for forecasting transforms that also supports confidence intervals for each forecasted value.
            For more details, please refer to http://arxiv.org/pdf/1204.3251.pdf
            </summary>
            <typeparam name="TInput">The type of the input sequence</typeparam>
            <typeparam name="TState">The type of the input sequence</typeparam>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialForecastingTransformBase`2.ForecastingStateBase">
            <summary>
            The base state class for sequential anomaly detection: this class implements the p-values and martinagle calculations for anomaly detection
            given that the raw anomaly score calculation is specified by the derived classes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialForecastingTransformBase`2.ForecastingStateBase.InitializeForecaster">
            <summary>
            The abstract method that realizes the initialization functionality for the forecaster.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.DataBox`1">
            <summary>
            The box class that is used to box the TInput and TOutput for the LambdaTransform.
            </summary>
            <typeparam name="T">The type to be boxed, e.g. TInput or TOutput</typeparam>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.DataBoxForecastingWithConfidenceIntervals`1">
            <summary>
            The box class that is used to box the TInput and TOutput for the LambdaTransform.
            This is for the case where there are three output columns.
            </summary>
            <typeparam name="T">The type to be boxed, e.g. TInput or TOutput</typeparam>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3">
            <summary>
            The base class for sequential processing transforms. This class implements the basic sliding window buffering. The derived classes need to specify the transform logic,
            the initialization logic and the learning logic via implementing the abstract methods TransformCore(), InitializeStateCore() and LearnStateFromDataCore(), respectively
            </summary>
            <typeparam name="TInput">The input type of the sequential processing.</typeparam>
            <typeparam name="TOutput">The dst type of the sequential processing.</typeparam>
            <typeparam name="TState">The state type of the sequential processing. Must be a class inherited from StateBase </typeparam>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase">
            <summary>
            The base class for encapsulating the State object for sequential processing. This class implements a windowed buffer.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.ParentTransform">
            <summary>
            A reference to the parent transform that operates on the state object.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.WindowedBuffer">
            <summary>
            The internal windowed buffer for buffering the values in the input sequence.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.InitialWindowedBuffer">
            <summary>
            The buffer used to buffer the training data points.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.RowCounter">
            <summary>
            Counts the number of rows observed by the transform so far.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.InitState(System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase{`0,`1,`2},Microsoft.ML.Runtime.IHost)">
            <summary>
            This method sets the window size and initializes the buffer only once.
            Since the class needs to implement a default constructor, this methods provides a mechanism to initialize the window size and buffer.
            </summary>
            <param name="windowSize">The size of the windowed buffer</param>
            <param name="initialWindowSize">The size of the windowed initial buffer used for training</param>
            <param name="parentTransform">The parent transform of this state object</param>
            <param name="host">The host</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.Reset">
            <summary>
            This method implements the basic resetting mechanism for a state object and clears the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.SetNaOutput(`1@)">
            <summary>
            The abstract method that specifies the NA value for <paramref name="dst"/>'s type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.TransformCore(`0@,Microsoft.ML.Internal.Utilities.FixedSizeQueue{`0},System.Int64,`1@)">
            <summary>
            The abstract method that realizes the main logic for the transform.
            </summary>
            <param name="input">A reference to the input object.</param>
            <param name="dst">A reference to the dst object.</param>
            <param name="windowedBuffer">A reference to the windowed buffer.</param>
            <param name="iteration">A long number that indicates the number of times TransformCore has been called so far (starting value = 0).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.InitializeStateCore">
            <summary>
            The abstract method that realizes the logic for initializing the state object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.StateBase.LearnStateFromDataCore(Microsoft.ML.Internal.Utilities.FixedSizeQueue{`0})">
            <summary>
            The abstract method that realizes the logic for learning the parameters and the initial state object from data.
            </summary>
            <param name="data">A queue of data points used for training</param>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3._transform">
            <summary>
            The inner stateful Lambda Transform object.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.WindowSize">
            <summary>
            The window size for buffering.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.InitialWindowSize">
            <summary>
            The number of datapoints from the beginning of the sequence that are used for learning the initial state.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.Data.DataViewType)">
            <summary>
            The main constructor for the sequential transform
            </summary>
            <param name="windowSize">The size of buffer used for windowed buffering.</param>
            <param name="initialWindowSize">The number of datapoints picked from the beginning of the series for training the transform parameters if needed.</param>
            <param name="outputColumnName">The name of the dst column.</param>
            <param name="inputColumnName">The name of the input column.</param>
            <param name="name">Name of the extending type.</param>
            <param name="env">A reference to the environment variable.</param>
            <param name="input">A reference to the input data view.</param>
            <param name="outputColTypeOverride"></param>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.Cursor">
            <summary>
            A wrapper around the cursor which replaces the schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformBase`3.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3">
            <summary>
            The base class for sequential processing transforms. This class implements the basic sliding window buffering. The derived classes need to specify the transform logic,
            the initialization logic and the learning logic via implementing the abstract methods TransformCore(), InitializeStateCore() and LearnStateFromDataCore(), respectively
            </summary>
            <typeparam name="TInput">The input type of the sequential processing.</typeparam>
            <typeparam name="TOutput">The dst type of the sequential processing.</typeparam>
            <typeparam name="TState">The dst type of the sequential processing.</typeparam>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase">
            <summary>
            The base class for encapsulating the State object for sequential processing. This class implements a windowed buffer.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.ParentTransform">
            <summary>
            A reference to the parent transform that operates on the state object.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.WindowedBuffer">
            <summary>
            The internal windowed buffer for buffering the values in the input sequence.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.InitialWindowedBuffer">
            <summary>
            The buffer used to buffer the training data points.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.RowCounter">
            <summary>
            Counts the number of rows observed by the transform so far.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.InitState(System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase{`0,`1,`2},Microsoft.ML.Runtime.IHost)">
            <summary>
            This method sets the window size and initializes the buffer only once.
            Since the class needs to implement a default constructor, this methods provides a mechanism to initialize the window size and buffer.
            </summary>
            <param name="windowSize">The size of the windowed buffer</param>
            <param name="initialWindowSize">The size of the windowed initial buffer used for training</param>
            <param name="parentTransform">The parent transform of this state object</param>
            <param name="host">The host</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.Reset">
            <summary>
            This method implements the basic resetting mechanism for a state object and clears the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.SetNaOutput(`1@)">
            <summary>
            The abstract method that specifies the NA value for the dst type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.TransformCore(`0@,Microsoft.ML.Internal.Utilities.FixedSizeQueue{`0},System.Int64,`1@)">
            <summary>
            The abstract method that realizes the main logic for the transform.
            </summary>
            <param name="input">A reference to the input object.</param>
            <param name="dst">A reference to the dst object.</param>
            <param name="windowedBuffer">A reference to the windowed buffer.</param>
            <param name="iteration">A long number that indicates the number of times TransformCore has been called so far (starting value = 0).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.TransformCore(`0@,Microsoft.ML.Internal.Utilities.FixedSizeQueue{`0},System.Int64,`1@,`1@,`1@)">
            <summary>
            The abstract method that realizes the main logic for the transform.
            </summary>
            <param name="input">A reference to the input object.</param>
            <param name="dst1">A reference to the dst object.</param>
            <param name="dst2"></param>
            <param name="dst3"></param>
            <param name="windowedBuffer">A reference to the windowed buffer.</param>
            <param name="iteration">A long number that indicates the number of times TransformCore has been called so far (starting value = 0).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.InitializeStateCore(System.Boolean)">
            <summary>
            The abstract method that realizes the logic for initializing the state object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.StateBase.LearnStateFromDataCore(Microsoft.ML.Internal.Utilities.FixedSizeQueue{`0})">
            <summary>
            The abstract method that realizes the logic for learning the parameters and the initial state object from data.
            </summary>
            <param name="data">A queue of data points used for training</param>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.WindowSize">
            <summary>
            The window size for buffering.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.InitialWindowSize">
            <summary>
            The number of datapoints from the beginning of the sequence that are used for learning the initial state.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.#ctor(Microsoft.ML.Runtime.IHost,System.Int32,System.Int32,System.String,System.String,Microsoft.ML.Data.DataViewType)">
            <summary>
            The main constructor for the sequential transform
            </summary>
            <param name="host">The host.</param>
            <param name="windowSize">The size of buffer used for windowed buffering.</param>
            <param name="initialWindowSize">The number of datapoints picked from the beginning of the series for training the transform parameters if needed.</param>
            <param name="outputColumnName">The name of the dst column.</param>
            <param name="inputColumnName">The name of the input column.</param>
            <param name="outputColType"></param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.SequentialDataTransform.GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.RowImpl.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.Cursor">
            <summary>
            A wrapper around the cursor which replaces the schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SequentialTransformerBase`3.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.TimeSeriesRowToRowMapperTransform">
            <summary>
            This class is a transform that can add any number of output columns, that depend on any number of input columns.
            It does so with the help of an <see cref="T:Microsoft.ML.Data.IRowMapper"/>, that is given a schema in its constructor, and has methods
            to get the dependencies on input columns and the getters for the output columns, given an active set of output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesRowToRowMapperTransform.GetActive(System.Func{System.Int32,System.Boolean},System.Func{System.Int32,System.Boolean}@)">
            <summary>
            Produces the set of active columns for the data view (as a bool[] of length bindings.ColumnCount),
            a predicate for the needed active input columns, and a predicate for the needed active
            output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesRowToRowMapperTransform.GetActive(System.Func{System.Int32,System.Boolean})">
            <summary>
            Produces the set of active columns for the data view (as a bool[] of length bindings.ColumnCount),
            a predicate for the needed active input columns, and a predicate for the needed active
            output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesRowToRowMapperTransform.GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesRowToRowMapperTransform.StatefulRowImpl.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesRowToRowMapperTransform.StatefulRowImpl.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesRowToRowMapperTransform.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TimeSeriesRowToRowMapperTransform.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SlidingWindowTransform">
            <summary>
            Outputs a sliding window on a time series of type Single.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SlidingWindowTransformBase`1">
            <summary>
            SlidingWindowTransformBase outputs a sliding window as a VBuffer from a series of any type.
            The VBuffer contains n consecutive observations delayed or not from the current one.
            Let's denote y(t) a timeseries, the transform returns a vector of values for each time t
            which corresponds to [y(t-d-l+1), y(t-d-l+2), ..., y(t-l-1), y(t-l)] where d is the size of the window
            and l is the delay.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SlidingWindowTransformBase`1.BeginOptions">
            <summary>
            Defines what should be done about the first rows.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SlidingWindowTransformBase`1.BeginOptions.NaNValues">
            <summary>
            Fill first rows with NaN values.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.SlidingWindowTransformBase`1.BeginOptions.FirstValue">
            <summary>
            Copy the first value of the series.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetectionBase.Microsoft#ML#ITransformer#IsRowToRowMapper">
            <summary>
            Whether a call to <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> should succeed, on an
            appropriate schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetectionBase.Microsoft#ML#Transforms#TimeSeries#IStatefulTransformer#Clone">
            <summary>
            Create a clone of the transformer. Used for taking the snapshot of the state.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetectionBase.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetectionBase.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Constructs a row-to-row mapper based on an input schema. If <see cref="P:Microsoft.ML.ITransformer.IsRowToRowMapper"/>
            is <c>false</c>, then an exception should be thrown. If the input schema is in any way
            unsuitable for constructing the mapper, an exception should likewise be thrown.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetectionBase.GetStatefulRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Same as <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> but also supports mechanism to save the state.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetectionBase.Transform(Microsoft.ML.IDataView)">
            <summary>
            Initialize a transformer which will do lambda transfrom on input data in prediction engine. No actual transformations happen here, just schema validation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetectionBase.Microsoft#ML#ICanSaveModel#Save(Microsoft.ML.ModelSaveContext)">
            <summary>
            For saving a model into a repository.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetectionBase.MakeRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Creates a row mapper from Schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetectionBase.MakeDataTransform(Microsoft.ML.IDataView)">
            <summary>
            Creates an IDataTransform from an IDataView.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyDetector">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator">
             <summary>
             Detect anomalies in time series using Spectral Residual(SR) algorithm
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this estimator, use
             [DetectAnomalyBySrCnn](xref:Microsoft.ML.TimeSeriesCatalog.DetectAnomalyBySrCnn(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double))
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | <xref:System.Single> |
             | Output column data type | 3-element vector of<xref:System.Double> |
             | Exportable to ONNX | No |
            
             ### Background
             At Microsoft, we have developed a time-series anomaly detection service which helps customers to monitor the time-series continuously
             and alert for potential incidents on time. To tackle the problem of time-series anomaly detection,
             we propose a novel algorithm based on Spectral Residual (SR) and Convolutional Neural Network
             (CNN). The SR model is borrowed from visual saliency detection domain to time-series anomaly detection.
             And here we onboarded this SR algorithm firstly.
            
             The Spectral Residual (SR) algorithm is unsupervised, which means training step is not needed while using SR. It consists of three major steps:
             (1) Fourier Transform to get the log amplitude spectrum;
             (2) calculation of spectral residual;
             (3) Inverse Fourier Transform that transforms the sequence back to spatial domain.
             Mathematically, given a sequence $\mathbf{x}$, we have
             $$A(f) = Amplitude(\mathfrak{F}(\mathbf{x}))\\P(f) = Phrase(\mathfrak{F}(\mathbf{x}))\\L(f) = log(A(f))\\AL(f) = h_n(f) \cdot L(f)\\R(f) = L(f) - AL(f)\\S(\mathbf{x}) = \mathfrak{F}^{-1}(exp(R(f) + P(f))^{2})$$
             where $\mathfrak{F}$ and $\mathfrak{F}^{-1}$ denote Fourier Transform and Inverse Fourier Transform respectively.
             $\mathbf{x}$ is the input sequence with shape $n × 1$; $A(f)$ is the amplitude spectrum of sequence $\mathbf{x}$;
             $P(f)$ is the corresponding phase spectrum of sequence $\mathbf{x}$; $L(f)$ is the log representation of $A(f)$;
             and $AL(f)$ is the average spectrum of $L(f)$ which can be approximated by convoluting the input sequence by $h_n(f)$,
             where $h_n(f)$ is an $n × n$ matrix defined as:
             $$n_f(f) = \begin{bmatrix}1&1&1&\cdots&1\\1&1&1&\cdots&1\\\vdots&\vdots&\vdots&\ddots&\vdots\\1&1&1&\cdots&1\end{bmatrix}$$
             $R(f)$ is the spectral residual, i.e., the log spectrum $L(f)$ subtracting the averaged log spectrum $AL(f)$.
             The spectral residual serves as a compressed representation of the sequence while the innovation part of the original sequence becomes more significant.
             At last, we transfer the sequence back to spatial domain via Inverse Fourier Transform. The result sequence $S(\mathbf{x})$ is called the saliency map.
             Given the saliency map $S(\mathbf{x})$, the output sequence $O(\mathbf{x})$ is computed by:
             $$O(x_i) = \begin{cases}1, if \frac{S(x_i)-\overline{S(x_i)}}{S(x_i)} > \tau\\0,otherwise,\end{cases}$$
             where $x_i$ represents an arbitrary point in sequence $\mathbf{x}$; $S(x_i)$is the corresponding point in the saliency map;
             and $\overline{S(x_i)}$ is the local average of the preceding points of $S(x_i)$.
            
             There are several parameters for SR algorithm. To obtain a model with good performance,
             we suggest to tune <strong>windowSize</strong> and <strong>threshold</strong> at first,
             these are the most important parameters to SR. Then you could search for an appropriate <strong>judgementWindowSize</strong>
             which is no larger than <strong>windowSize</strong>. And for the remaining parameters, you could use the default value directly.
            
             For more details please refer to the <a href="https://arxiv.org/pdf/1906.03821">Time-Series Anomaly Detection Service at Microsoft</a> paper.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TimeSeriesCatalog.DetectAnomalyBySrCnn(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)"/>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.String)">
            <param name="env">Host environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="windowSize">The size of the sliding window for computing spectral residual.</param>
            <param name="backAddWindowSize">The size of the sliding window for computing spectral residual.</param>
            <param name="lookaheadWindowSize">The number of pervious points used in prediction.</param>
            <param name="averagingWindowSize">The size of sliding window to generate a saliency map for the series.</param>
            <param name="judgementWindowSize">The size of sliding window to calculate the anomaly score for each data point.</param>
            <param name="threshold">The threshold to determine anomaly, score larger than the threshold is considered as anomaly.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.ErrorFunctionUtils">
            <summary>
            Provides the utility functions for different error functions for computing deviation.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper">
            <summary>
            The wrapper to <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.SsaAnomalyDetectionBase"/> that implements the general anomaly detection transform based on Singular Spectrum modeling of the time-series.
            For the details of the Singular Spectrum Analysis (SSA), refer to http://arxiv.org/pdf/1206.6910.pdf.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.Microsoft#ML#ITransformer#IsRowToRowMapper">
            <summary>
            Whether a call to <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> should succeed, on an
            appropriate schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.Microsoft#ML#Transforms#TimeSeries#IStatefulTransformer#Clone">
            <summary>
            Creates a clone of the transformer. Used for taking the snapshot of the state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Constructs a row-to-row mapper based on an input schema. If <see cref="P:Microsoft.ML.ITransformer.IsRowToRowMapper"/>
            is <c>false</c>, then an exception should be thrown. If the input schema is in any way
            unsuitable for constructing the mapper, an exception should likewise be thrown.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.GetStatefulRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Same as <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> but also supports mechanism to save the state.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.Transform(Microsoft.ML.IDataView)">
            <summary>
            Take the data in, make transformations, output the data.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual transformations happen here, just schema validation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.Microsoft#ML#ICanSaveModel#Save(Microsoft.ML.ModelSaveContext)">
            <summary>
            For saving a model into a repository.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.MakeRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Creates a row mapper from Schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.MakeDataTransform(Microsoft.ML.IDataView)">
            <summary>
            Creates an IDataTransform from an IDataView.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.SsaOptions">
            <summary>
            Options for SSA Anomaly Detection.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaAnomalyDetectionBaseWrapper.SsaAnomalyDetectionBase">
            <summary>
            This base class that implements the general anomaly detection transform based on Singular Spectrum modeling of the time-series.
            For the details of the Singular Spectrum Analysis (SSA), refer to http://arxiv.org/pdf/1206.6910.pdf.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaChangePointDetector">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator">
             <summary>
             Detect change points in time series using Singular Spectrum Analysis.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this estimator, use [DetectChangePointBySsa](xref:Microsoft.ML.TimeSeriesCatalog.DetectChangePointBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.ErrorFunction,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double))
            
             [!include[io](~/../docs/samples/docs/api-reference/io-time-series-change-point.md)]
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | Yes |
             | Input column data type | <xref:System.Single> |
             | Output column data type | 4-element vector of<xref:System.Double> |
             | Exportable to ONNX | No |
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-props.md)]
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-ssa.md)]
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-scorer.md)]
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TimeSeriesCatalog.DetectChangePointBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.ErrorFunction,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)" />
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Double,System.Int32,System.Int32,System.Int32,System.String,Microsoft.ML.Transforms.TimeSeries.ErrorFunction,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator"/>
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            Column is a vector of type double and size 4. The vector contains Alert, Raw Score, P-Value and Martingale score as first four values.</param>
            <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
            <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
            <param name="changeHistoryLength">The size of the sliding window for computing the p-value.</param>
            <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
            <param name="martingale">The martingale used for scoring.</param>
            <param name="eps">The epsilon parameter for the Power martingale.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Train and return a transformer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaForecastingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator">
             <summary>
             Forecasts using Singular Spectrum Analysis.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this estimator, use [ForecastBySsa](xref:Microsoft.ML.TimeSeriesCatalog.ForecastBySsa(Microsoft.ML.ForecastingCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single,Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod,System.Int32?,System.Int32?,System.Boolean,System.Boolean,Microsoft.ML.Transforms.TimeSeries.GrowthRatio?,System.String,System.String,System.Single,System.Boolean))
            
             [!include[io](~/../docs/samples/docs/api-reference/io-time-series-ssa-forecast.md)]
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | Yes |
             | Input column data type | <xref:System.Single> |
             | Output column data type | Vector of <xref:System.Single> |
             | Exportable to ONNX | No |
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-props.md)]
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-ssa.md)]
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TimeSeriesCatalog.ForecastBySsa(Microsoft.ML.ForecastingCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single,Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{Microsoft.ML.Transforms.TimeSeries.GrowthRatio},System.String,System.String,System.Single,System.Boolean)" />
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single,Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{Microsoft.ML.Transforms.TimeSeries.GrowthRatio},System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator"/>
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            The vector contains Alert, Raw Score, P-Value as first three values.</param>
            <param name="windowSize">The length of the window on the series for building the trajectory matrix (parameter L).</param>
            <param name="seriesLength">The length of series that is kept in buffer for modeling (parameter N).</param>
            <param name="trainSize">The length of series from the beginning used for training.</param>
            <param name="horizon">The number of values to forecast.</param>
            <param name="isAdaptive">The flag determing whether the model is adaptive.</param>
            <param name="discountFactor">The discount factor in [0,1] used for online updates.</param>
            <param name="rankSelectionMethod">The rank selection method.</param>
            <param name="rank">The desired rank of the subspace used for SSA projection (parameter r). This parameter should be in the range in [1, windowSize].
            If set to null, the rank is automatically determined based on prediction error minimization.</param>
            <param name="maxRank">The maximum rank considered during the rank selection process. If not provided (i.e. set to null), it is set to windowSize - 1.</param>
            <param name="shouldStabilize">The flag determining whether the model should be stabilized.</param>
            <param name="shouldMaintainInfo">The flag determining whether the meta information for the model needs to be maintained.</param>
            <param name="maxGrowth">The maximum growth on the exponential trend.</param>
            <param name="confidenceLowerBoundColumn">The name of the confidence interval lower bound column. If not specified then confidence intervals will not be calculated.</param>
            <param name="confidenceUpperBoundColumn">The name of the confidence interval upper bound column. If not specified then confidence intervals will not be calculated.</param>
            <param name="confidenceLevel">The confidence level for forecasting.</param>
            <param name="variableHorizon">Set this to true if horizon will change after training.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Train and return a transformer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            Creates three output columns if confidence intervals are requested otherwise
            just one.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper">
            <summary>
            The wrapper to <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.SsaForecastingBase"/> that implements the general anomaly detection transform based on Singular Spectrum modeling of the time-series.
            For the details of the Singular Spectrum Analysis (SSA), refer to http://arxiv.org/pdf/1206.6910.pdf.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.Microsoft#ML#ITransformer#IsRowToRowMapper">
            <summary>
            Whether a call to <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> should succeed, on an
            appropriate schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.Microsoft#ML#Transforms#TimeSeries#IStatefulTransformer#Clone">
            <summary>
            Creates a clone of the transformer. Used for taking the snapshot of the state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Constructs a row-to-row mapper based on an input schema. If <see cref="P:Microsoft.ML.ITransformer.IsRowToRowMapper"/>
            is <c>false</c>, then an exception should be thrown. If the input schema is in any way
            unsuitable for constructing the mapper, an exception should likewise be thrown.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.GetStatefulRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Same as <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> but also supports mechanism to save the state.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.Transform(Microsoft.ML.IDataView)">
            <summary>
            Take the data in, make transformations, output the data.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual transformations happen here, just schema validation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.Microsoft#ML#ICanSaveModel#Save(Microsoft.ML.ModelSaveContext)">
            <summary>
            For saving a model into a repository.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.MakeRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Creates a row mapper from Schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.MakeDataTransform(Microsoft.ML.IDataView)">
            <summary>
            Creates an IDataTransform from an IDataView.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.SsaForecastingOptions">
            <summary>
            Options for SSA Anomaly Detection.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaForecastingBaseWrapper.SsaForecastingBase">
            <summary>
            This base class that implements the general anomaly detection transform based on Singular Spectrum modeling of the time-series.
            For the details of the Singular Spectrum Analysis (SSA), refer to http://arxiv.org/pdf/1206.6910.pdf.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaSpikeDetector">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator">
             <summary>
             Detect spikes in time series using Singular Spectrum Analysis.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this estimator, use [DetectSpikeBySsa](xref:Microsoft.ML.TimeSeriesCatalog.DetectSpikeBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide,Microsoft.ML.Transforms.TimeSeries.ErrorFunction))
            
             [!include[io](~/../docs/samples/docs/api-reference/io-time-series-spike.md)]
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | Yes |
             | Input column data type | <xref:System.Single> |
             | Output column data type | 3-element vector of <xref:System.Double> |
             | Exportable to ONNX | No |
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-props.md)]
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-ssa.md)]
            
             [!include[io](~/../docs/samples/docs/api-reference/time-series-pvalue.md)]
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TimeSeriesCatalog.DetectSpikeBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide,Microsoft.ML.Transforms.TimeSeries.ErrorFunction)" />
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Double,System.Int32,System.Int32,System.Int32,System.String,Microsoft.ML.Transforms.TimeSeries.AnomalySide,Microsoft.ML.Transforms.TimeSeries.ErrorFunction)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator"/>
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
            <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
            <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
            <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            The vector contains Alert, Raw Score, P-Value as first three values.</param>
            <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
            <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Train and return a transformer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.TimeSeriesProcessingEntryPoints">
            <summary>
            Entry points for text anylytics transforms.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix">
             <summary>
             This class encapsulates the trajectory matrix of a time-series used in Singular Spectrum Analysis (SSA).
             In particular, for a given series of length N and the window size of L, (such that N > L):
            
             x(1), x(2), x(3), ... , x(N)
            
             The trajectory matrix H is defined in the explicit form as:
            
                 [x(1)  x(2)   x(3)   ...  x(N - L + 1)]
                 [x(2)  x(3)   x(4)   ...  x(N - L + 2)]
             H = [x(3)  x(4)   x(5)   ...  x(N - L + 3)]
                 [ .     .      .               .      ]
                 [ .     .      .               .      ]
                 [x(L)  x(L+1) x(L+2) ...      x(N)    ]
            
             of size L * K, where K = N - L + 1.
            
             This class does not explicitly store the trajectory matrix though. Furthermore, since the trajectory matrix is
             a Hankel matrix, its multiplication by an arbitrary vector is implemented efficiently using the Discrete Fast Fourier Transform.
             </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix._data">
            <summary>
            The time series data
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix._windowSize">
            <summary>
            The window length L
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix._seriesLength">
            <summary>
            The series length N
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix._cachedSeriesFftRe">
            <summary>
            The real part of the Fourier transform of the input series.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix._cachedSeriesFftIm">
            <summary>
            The imaginary part of the Fourier transform of the input series.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.SeriesLength">
            <summary>
            Returns the length of the time-series represented by this trajectory matrix.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.WindowSize">
            <summary>
            Returns the window size (L) used for building this trajectory matrix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.#ctor(Microsoft.ML.Runtime.IExceptionContext,System.Single[],System.Int32,System.Int32)">
            <summary>
            Constructs a trajectory matrix from the input series given the window length (L)
            </summary>
            <param name="ectx">The exception context</param>
            <param name="data">The input series</param>
            <param name="windowSize">The window size L</param>
            <param name="seriesLength">The number of elements from the beginning of the input array to be used for building the trajectory matrix</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.SetSeries(System.Single[])">
            <summary>
            Sets the value of the underlying series to new values.
            </summary>
            <param name="data">The new series</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.ComputeUnnormalizedTrajectoryCovarianceMat(System.Single[])">
            <summary>
            This function computes the unnormalized covariance of the trajectory matrix (which is a Hankel matrix of size L*K).
            In particular, if H is the trajectory matrix of size L*K on the input series, this method computes H * H' (of size L*L).
            This function does not form the trajectory matrix H explicitly.
            Let k = N - L + 1 be the number of columns of the trajectory matrix.
            In most applications, we have L smaller than K, though this is not a strict constraint.
            The naive computational complexity for computing H * H' is O(L*L*K) while the naive memory complexity is O(K*L + L*L).
            However, this function computes H * H' in O(L*L + M) time, where M = min(L*K, (L + K)*Log(L + K)) and O(L*L) memory.
            </summary>
            <param name="cov">The output row-major vectorized covariance matrix of size L*L</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.ComputeSvd(System.Single[]@,System.Single[]@)">
            <summary>
            This function computes the singular value decomposition of the trajectory matrix.
            This function only computes the singular values and the left singular vectors.
            </summary>
            <param name="singularValues">The output singular values of size L</param>
            <param name="leftSingularvectors">The output singular vectors of size L*L</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.NaiveMultiply(System.Single[],System.Single[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            This function computes the naive multiplication of the trajectory matrix H by an arbitrary vector v, i.e. H * v.
            </summary>
            <param name="vector">The input vector</param>
            <param name="result">The output vector allocated by the caller</param>
            <param name="add">Whether the multiplication result should be added to the current value in result</param>
            <param name="srcIndex">The starting index for the vector argument</param>
            <param name="dstIndex">The starting index for the result</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.FftMultiply(System.Single[],System.Single[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            This function computes the efficient multiplication of the trajectory matrix H by an arbitrary vector v, i.e. H * v.
            Since the trajectory matrix is a Hankel matrix, using the Discrete Fourier Transform,
            the multiplication is carried out in O(N.log(N)) instead of O(N^2), wheere N is the series length.
            For details, refer to Algorithm 2 in http://arxiv.org/pdf/0911.4498.pdf.
            </summary>
            <param name="vector">The input vector</param>
            <param name="result">The output vector allocated by the caller</param>
            <param name="add">Whether the multiplication result should be added to the current value in result</param>
            <param name="srcIndex">The starting index for the vector argument</param>
            <param name="dstIndex">The starting index for the result</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.Multiply(System.Single[],System.Single[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            This function efficiently computes the multiplication of the trajectory matrix H by an arbitrary vector v, i.e. H * v.
            </summary>
            <param name="vector">The input vector</param>
            <param name="result">The output vector allocated by the caller</param>
            <param name="add">Whether the multiplication result should be added to the current value in result</param>
            <param name="srcIndex">The starting index for the vector argument</param>
            <param name="dstIndex">The starting index for the result</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.NaiveMultiplyTranspose(System.Single[],System.Single[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            This function computes the naive multiplication of the transpose of the trajectory matrix H by an arbitrary vector v, i.e. H' * v.
            </summary>
            <param name="vector">The input vector</param>
            <param name="result">The output vector allocated by the caller</param>
            <param name="add">Whether the multiplication result should be added to the current value in result</param>
            <param name="srcIndex">The starting index for the vector argument</param>
            <param name="dstIndex">The starting index for the result</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.FftMultiplyTranspose(System.Single[],System.Single[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            This function computes the the multiplication of the transpose of the trajectory matrix H by an arbitrary vector v, i.e. H' * v.
            Since the trajectory matrix is a Hankel matrix, using the Discrete Fourier Transform,
            the multiplication is carried out in O(N.log(N)) instead of O(N^2), wheere N is the series length.
            For details, refer to Algorithm 3 in http://arxiv.org/pdf/0911.4498.pdf.
            </summary>
            <param name="vector">The input vector</param>
            <param name="result">The output vector allocated by the caller</param>
            <param name="add">Whether the multiplication result should be added to the current value in result</param>
            <param name="srcIndex">The starting index for the vector argument</param>
            <param name="dstIndex">The starting index for the result</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.MultiplyTranspose(System.Single[],System.Single[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            This function efficiently computes the multiplication of the transpose of the trajectory matrix H by an arbitrary vector v, i.e. H' * v.
            </summary>
            <param name="vector">The input vector</param>
            <param name="result">The output vector allocated by the caller</param>
            <param name="add">Whether the multiplication result should be added to the current value in result</param>
            <param name="srcIndex">The starting index for the vector argument</param>
            <param name="dstIndex">The starting index for the result</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.NaiveRankOneHankelization(System.Single[],System.Single[],System.Single,System.Single[],System.Boolean,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This function computes the naive Hankelization of the matrix sigma * u * v' in O(L * K).
            </summary>
            <param name="u">The u vector</param>
            <param name="v">The v vector</param>
            <param name="sigma">The scalar coefficient</param>
            <param name="result">The output series</param>
            <param name="add">Whether the hankelization result should be added to the current value in result</param>
            <param name="uIndex">The starting index for the u vector argument</param>
            <param name="vIndex">The starting index for the v vector argument</param>
            <param name="dstIndex">The starting index for the result</param>
            <param name="start">The staring index of the series to be reconstructed (by default zero)</param>
            <param name="end">The ending index of the series to be reconstructed (by default series length)</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.FftRankOneHankelization(System.Single[],System.Single[],System.Single,System.Single[],System.Boolean,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This function computes the efficient Hankelization of the matrix sigma * u * v' using Fast Fourier Transform in in O((L + K) * log(L + K)).
            For details, refer to Algorithm 4 in http://arxiv.org/pdf/0911.4498.pdf.
            </summary>
            <param name="u">The u vector</param>
            <param name="v">The v vector</param>
            <param name="sigma">The scalar coefficient</param>
            <param name="result">The output series</param>
            <param name="add">Whether the hankelization result should be added to the current value in result</param>
            <param name="uIndex">The starting index for the u vector argument</param>
            <param name="vIndex">The starting index for the v vector argument</param>
            <param name="dstIndex">The starting index for the result</param>
            <param name="start">The staring index of the series to be reconstructed (by default zero)</param>
            <param name="end">The ending index of the series to be reconstructed (by default series length)</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TimeSeries.TrajectoryMatrix.RankOneHankelization(System.Single[],System.Single[],System.Single,System.Single[],System.Boolean,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This function efficiently computes the  Hankelization of the matrix sigma * u * v'.
            </summary>
            <param name="u">The u vector</param>
            <param name="v">The v vector</param>
            <param name="sigma">The scalar coefficient</param>
            <param name="result">The output series</param>
            <param name="add">Whether the hankelization result should be added to the current value in result</param>
            <param name="uIndex">The starting index for the u vector argument</param>
            <param name="vIndex">The starting index for the v vector argument</param>
            <param name="dstIndex">The starting index for the result</param>
            <param name="start">The staring index of the series to be reconstructed (by default zero)</param>
            <param name="end">The ending index of the series to be reconstructed (by default series length)</param>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.IDeseasonality.Deseasonality(System.Double[]@,System.Int32,System.Double[]@)">
            <summary>
            Remove the seasonality component from the given time-series.
            </summary>
            <param name="values">An array representing the input time-series.</param>
            <param name="period">The period value of the time-series.</param>
            <param name="results">The de-seasonalized time-series.</param>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.StlDeseasonality">
            <summary>
            This class takes the residual component of stl decompose as the deseasonality result.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.RootCauseAnalyzer.AnalyzeOneLayer(Microsoft.ML.TimeSeries.RootCauseLocalizationInput)">
            <summary>
             This is a function for analyzing one layer for root cause. We rank dimensions according to their likelihood of containing the root case.
             For each dimension, we select one dimension with values who contributes the most to the anomaly.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.RootCauseAnalyzer.SelectOrderedDimension(System.Collections.Generic.List{Microsoft.ML.TimeSeries.TimeSeriesPoint},System.Collections.Generic.List{Microsoft.ML.TimeSeries.TimeSeriesPoint},System.Collections.Generic.List{System.String})">
            <summary>
             Use leaves point information to select ordered dimensions
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.RootCauseAnalyzer.SelectOrderedDimensions(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.ML.TimeSeries.TimeSeriesPoint}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.ML.TimeSeries.TimeSeriesPoint}},System.Collections.Generic.List{System.String})">
            <summary>
             Use children point information to select ordered dimensions
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.RootCauseAnalyzer.GetSurpriseScore(Microsoft.ML.TimeSeries.TimeSeriesPoint,Microsoft.ML.TimeSeries.TimeSeriesPoint)">
            <summary>
            Calculate the surprise score according to root cause point and anomaly point
            </summary>
            <param name="rootCausePoint">A point which has been detected as root cause</param>
            <param name="anomalyPoint">The anomaly point</param>
            <remarks>
            <format type="text/markdown">
             [!include[io](~/../docs/samples/docs/api-reference/time-series-root-cause-surprise-score.md)]
            </format>
            </remarks>
            <returns>Surprise score</returns>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.RootCause.Items">
            <summary>
            A List for root cause item. Instance of the item should be <see cref="T:Microsoft.ML.TimeSeries.RootCauseItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.RootCause.Gain">
            <summary>
            The gain for the potential root cause
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.RootCause.GainRatio">
            <summary>
            The gain ratio for the potential root cause
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.RootCauseLocalizationInput.AnomalyTimestamp">
            <summary>
            When the anomaly incident occurs.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.RootCauseLocalizationInput.AnomalyDimension">
            <summary>
            Point with the anomaly dimension must exist in the slice list at the anomaly timestamp, or the libary will not calculate the root cause.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.RootCauseLocalizationInput.Slices">
            <summary>
            A list of points at different timestamp. If the slices don't contain point data corresponding to the anomaly timestamp, the root cause localization alogorithm will not calculate the root cause as no information at the anomaly timestamp is provided.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.RootCauseLocalizationInput.AggregateType">
            <summary>
            The aggregated type, the type should be  <see cref="T:Microsoft.ML.TimeSeries.AggregateType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.RootCauseLocalizationInput.AggregateSymbol">
            <summary>
            The string you defined as a aggregated symbol in the AnomalyDimension and point dimension.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.AggregateType.Unknown">
            <summary>
            Make the aggregate type as unknown type.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.AggregateType.Sum">
            <summary>
            Make the aggregate type as summation.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.AggregateType.Avg">
            <summary>
            Make the aggregate type as average.
             </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.AggregateType.Min">
            <summary>
            Make the aggregate type as min.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.AggregateType.Max">
            <summary>
            Make the aggregate type as max.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.AnomalyDirection.Up">
            <summary>
            the value is larger than expected value.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.AnomalyDirection.Down">
            <summary>
            the value is lower than expected value.
             </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.AnomalyDirection.Same">
            <summary>
            the value is the same as expected value.
             </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.RootCauseItem.Score">
             <summary>
            The score is a value to evaluate the contribution to the anomaly incident. The range is between [0,1]. The larger the score, the root cause contributes the most to the anomaly. The parameter beta has an influence on this score. For how the score is calculated, you can refer to the source code.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.RootCauseItem.Path">
            <summary>
            Path is a list of the dimension key that the libary selected for you. In this root cause localization library, for one time call for the library, the path will be obtained and the length of path list will always be 1. Different RootCauseItem obtained from one library call will have the same path as it is the best dimension selected for the input.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.RootCauseItem.Dimension">
            <summary>
            The dimension for the detected root cause point.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.RootCauseItem.Direction">
            <summary>
            The direction for the detected root cause point, should be <see cref="T:Microsoft.ML.TimeSeries.AnomalyDirection"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.MetricSlice.TimeStamp">
            <summary>
            Timestamp for the point list.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.MetricSlice.Points">
            <summary>
            A list of points
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.TimeSeriesPoint.Value">
            <summary>
            Value of a time series point.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.TimeSeriesPoint.ExpectedValue">
            <summary>
            Forecasted value for the time series point.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.TimeSeriesPoint.IsAnomaly">
            <summary>
            Whether the point is an anomaly point.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.TimeSeriesPoint.Dimension">
            <summary>
            Dimension information for the point. For example, City = New York City, Dataceter = DC1. The value for this dictionary is an object, when the Dimension is used, the equals function for the Object will be used. If you have a customized class, you need to define the Equals function.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.TimeSeriesPoint.Delta">
            <summary>
            Difference between value and expected value.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.SeasonalityDetector">
            <summary>
            This class is used to detect the periodicity.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.SeasonalityDetector.MaxLag">
            <summary>
            In practice, the max lag very rarely exceed 365, which lacks of strong interpretation, and which also brings performance overhead.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.SeasonalityDetector.MinRecurrentCount">
            <summary>
            Suppose the length of time series is 651, now we found an period is 128, then 651/128 = 5, which means there are at most 5 recurrent period. this is too small, the significance build upon this is not trustable.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.SeasonalityDetector.MinEnergyThreshold">
            <summary>
            When input time series is with very close values (i.e., different is smaller than E-20), the accuracy of double could distort the
            final trend signal. Any seasonal signal under such circumstance becomes unreliable.
            So use this threshold to eliminate such kind of time series. Here set to 1e-10 is for conservative consideration.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.SeasonalityDetector.DetectSeasonality(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.Int32,System.Double)">
            <summary>
            This method detects this predictable interval (or period) by adopting techniques of fourier analysis.
            Returns -1 if no such pattern is found, that is, the input values do not follow a seasonal fluctuation.
            </summary>
            <param name="host">The detect seasonality host environment.</param>
            <param name="input">Input DataView.The data is an instance of <see cref="T:Microsoft.ML.IDataView"/>.</param>
            <param name="inputColumnName">Name of column to process. The column data must be <see cref="T:System.Double"/>.</param>
            <param name="seasonalityWindowSize">An upper bound on the number of values to be considered in the input values.
            When set to -1, use the whole input to fit model; when set to a positive integer, use this number as batch size.
            Default value is -1.</param>
            <param name="randomessThreshold">Randomness threshold, ranging from [0, 1]. It specifies how confidence the input
            follows a predictable pattern recurring as seasonal data. By default, it is set as 0.95.
            </param>
            <returns>The detected period if seasonality period exists, otherwise return -1.</returns>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.SeasonalityDetector.FindActualPeriod(System.Numerics.Complex[],System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Find the actual period based on best frequency and second best frequency:
            Pick the best frequency by inspecting the auto-correlation energy (pick the highest) in time-domain.
            In the normal case, usually, when the time series is with period T, then the best frequency is N/T,
            while the second frequency would be N/2T, because period = T implies period = nT, where n is an integer.
            In such a case, smaller period will win out on the autu-correlation energy list, due to the property
            of auto-correlation.
            </summary>
            <param name="values">The auto-correlation function of the augmented time series</param>
            <param name="bestFrequency">The best frequency candidate</param>
            <param name="secondFrequency">The second best frequency candidate</param>
            <param name="timeSeriesLength">The length of the original time series, this is used for post
            processing to reduce false positive
            </param>
            <param name="randomnessThreshold">Randomness threshold that specifies how confidently the input
            values follow a predictable pattern recurring as seasonal data.
            </param>
            <returns>The period detected by check best frequency and second best frequency</returns>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.SeasonalityDetector.FindBestTwoFrequencies(System.Numerics.Complex[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            In order to pick up a proper frequency robustly (this is useful especially for large frequency,
            or small period, e.g., period = 2), this method aims to pick up the top two frequencies for
            further evaluation. The energy of the second frequency (in frequency domain) must be at similar
            magnitude compared with the energy of the first frequency.
            </summary>
            <param name="values">the energy list in the frequency domain, the index is the frequency.</param>
            <param name="timeSeriesLength">the original time series length</param>
            <param name="bestFrequency">the frequency with highest energy</param>
            <param name="secondFrequency">the frequency with second highest energy</param>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.SeasonalityDetector.FindBestPeriod(System.Numerics.Complex[],System.Int32,System.Int32,System.Double@)">
            <summary>
            Given a frequency F represented by an integer, we aim to find the best period by inspecting the
            auto-correlation function in time domain. Since either frequency or the period is an integer,
            the possible period located within [N/(F+1), N/(F-1)], we need to check this domain, and pick
            the best one, where N is the length of the augmented time series.
            </summary>
            <param name="values">The auto-correlation function of the augmented time series</param>
            <param name="frequency">The input frequency candidate</param>
            <param name="timeSeriesLength">The length of the original time series, this is used for post processing to reduce false positive</param>
            <param name="energy">Output the energy on the auto-correlation function</param>
            <returns>The best period estimated</returns>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.SrCnnDetectMode">
            <summary>
            The detect modes of SrCnn models.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.SrCnnDetectMode.AnomalyOnly">
            <summary>
            In this mode, output (IsAnomaly, RawScore, Mag).
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.SrCnnDetectMode.AnomalyAndMargin">
            <summary>
            In this mode, output (IsAnomaly, AnomalyScore, Mag, ExpectedValue, BoundaryUnit, UpperBoundary, LowerBoundary).
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.SrCnnDetectMode.AnomalyAndExpectedValue">
            <summary>
            In this mode, output (IsAnomaly, RawScore, Mag, ExpectedValue).
            </summary>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.SrCnnDeseasonalityMode">
            <summary>
            The Deseasonality modes of SrCnn models. The de-seasonality mode is envoked when the period of the series is greater than 0.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.SrCnnDeseasonalityMode.Stl">
            <summary>
            In this mode, the stl decompose algorithm is used to de-seasonality.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.SrCnnDeseasonalityMode.Mean">
            <summary>
            In this mode, the mean value of points in the same position in a period is substracted to de-seasonality.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.SrCnnDeseasonalityMode.Median">
            <summary>
            In this mode, the median value of points in the same position in a period is substracted to de-seasonality.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetector">
             <summary>
             Detect timeseries anomalies for entire input using Spectral Residual(SR) algorithm.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this detector, use
             [DetectEntireAnomalyBySrCnn](xref:Microsoft.ML.TimeSeriesCatalog.DetectEntireAnomalyBySrCnn(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.IDataView,System.String,System.String,System.Double,System.Int32,System.Double,SrCnnDetectMode))
            
             ### Background
             At Microsoft, we developed a time-series anomaly detection service which helps customers to monitor the time-series continuously
             and alert for potential incidents on time. To tackle the problem of time-series anomaly detection,
             we proposed a novel algorithm based on Spectral Residual (SR) and Convolutional Neural Network
             (CNN). The SR model is borrowed from visual saliency detection domain to time-series anomaly detection.
             And here we onboarded this SR algorithm firstly.
            
             The Spectral Residual (SR) algorithm is unsupervised, which means a training step is not needed when using SR. It consists of three major steps:
             (1) Fourier Transform to get the log amplitude spectrum;
             (2) calculation of spectral residual;
             (3) Inverse Fourier Transform that transforms the sequence back to spatial domain.
             Mathematically, given a sequence $\mathbf{x}$, we have
             $$A(f) = Amplitude(\mathfrak{F}(\mathbf{x}))\\P(f) = Phrase(\mathfrak{F}(\mathbf{x}))\\L(f) = log(A(f))\\AL(f) = h_n(f) \cdot L(f)\\R(f) = L(f) - AL(f)\\S(\mathbf{x}) = \mathfrak{F}^{-1}(exp(R(f) + P(f))^{2})$$
             where $\mathfrak{F}$ and $\mathfrak{F}^{-1}$ denote Fourier Transform and Inverse Fourier Transform respectively.
             $\mathbf{x}$ is the input sequence with shape $n × 1$; $A(f)$ is the amplitude spectrum of sequence $\mathbf{x}$;
             $P(f)$ is the corresponding phase spectrum of sequence $\mathbf{x}$; $L(f)$ is the log representation of $A(f)$;
             and $AL(f)$ is the average spectrum of $L(f)$ which can be approximated by convoluting the input sequence by $h_n(f)$,
             where $h_n(f)$ is an $n × n$ matrix defined as:
             $$n_f(f) = \begin{bmatrix}1&1&1&\cdots&1\\1&1&1&\cdots&1\\\vdots&\vdots&\vdots&\ddots&\vdots\\1&1&1&\cdots&1\end{bmatrix}$$
             $R(f)$ is the spectral residual, i.e., the log spectrum $L(f)$ subtracting the averaged log spectrum $AL(f)$.
             The spectral residual serves as a compressed representation of the sequence while the innovation part of the original sequence becomes more significant.
             At last, we transfer the sequence back to spatial domain via Inverse Fourier Transform. The result sequence $S(\mathbf{x})$ is called the saliency map.
             Given the saliency map $S(\mathbf{x})$, the output sequence $O(\mathbf{x})$ is computed by:
             $$O(x_i) = \begin{cases}1, if \frac{S(x_i)-\overline{S(x_i)}}{S(x_i)} > \tau\\0,otherwise,\end{cases}$$
             where $x_i$ represents an arbitrary point in sequence $\mathbf{x}$; $S(x_i)$is the corresponding point in the saliency map;
             and $\overline{S(x_i)}$ is the local average of the preceding points of $S(x_i)$.
            
             * [Link to the KDD 2019 paper](https://dl.acm.org/doi/10.1145/3292500.3330680)
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TimeSeriesCatalog.DetectEntireAnomalyBySrCnn(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.IDataView,System.String,System.String,System.Double,System.Int32,System.Double,Microsoft.ML.TimeSeries.SrCnnDetectMode)"/>
             <seealso cref="M:Microsoft.ML.TimeSeriesCatalog.DetectEntireAnomalyBySrCnn(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.IDataView,System.String,System.String,Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetectorOptions)"/>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.FastLoess">
            <summary>
            This is the fast version of Loess. There are several alternatives to improve the performance. This one is an approximation approach.
            The smoothing is conducted on a sample set, and then the values on the left points are assigned directly.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.FastLoess._sampleSize">
            <summary>
            This class is a sampling based method, so here specifies the sample size.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.FastLoess.MinTimeSeriesLength">
            <summary>
            The minimum length of a valid time series. A time series with length equals 2 is so trivial and meaningless less than 2.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.FastLoess.#ctor(System.Collections.Generic.IReadOnlyList{System.Double},System.Collections.Generic.IReadOnlyList{System.Double},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.TimeSeries.FastLoess"/> class.
            The fast version of the Loess method. when the time series is too long, the sampling will be conducted first to improve the performance.
            </summary>
            <param name="xValues">The input x-axis values</param>
            <param name="yValues">The input y-axis values</param>
            <param name="isTemporal">If the regression is considered to take temporal information into account. In general, this is true if we are regressing a time series, and false if we are regressing scatter plot data</param>
            <param name="r">This method will provide default smoothing ratio if user did not specify</param>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.FastLoess.Y">
            <summary>
            The estimated y values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.FastLoess.Estimate">
            <summary>
            Assign the smoothing values to all the data points, not only on the sample size.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.FastLoess.EstimateY(System.Double)">
            <summary>
            Estimate a y value by giving an x value, even if the x value is not one of the input points.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.InnerStl.MinTimeSeriesLength">
            <summary>
            The minimum length of a valid time series. A time series with length equals 2 is so trivial and meaningless less than 2.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.InnerStl.Ns">
            <summary>
            The smoothing parameter for the seasonal component.
            This parameter should be odd, and at least 7.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.InnerStl.Ni">
            <summary>
            The number of passes through the inner loop. This parameter is set to 2, which works for many cases.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.InnerStl.No">
            <summary>
            The number of robustness iterations of the outer loop. This parameter is not used in this implementation as we simplify the implementation.
            Keep this parameter here as it is listed as one of the six parameters described in the original paper.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.InnerStl.Nl(System.Int32)">
            <summary>
            The smoothing parameter for the low-pass filter.
            This parameter should be the least odd integer greater than or equal to np.
            It will preventing the trend and seasonal components from competing for the same variation in the data.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.InnerStl.Nt(System.Int32)">
            <summary>
            The smoothing parameter for the trend component.
            In order to avoid the trend ans seasonal components compete for variation in the data, the nt should be chosen
            S.t., satisty the following inequality.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.InnerStl.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.TimeSeries.InnerStl"/> class.
            For a time series, only with y values. assume the x-values are 0, 1, 2, ...
            Since this method supports decompose seasonal signal, which requires the equal-space of the input x-axis values.
            Otherwise, the smoothing on seasonal component will be very complicated.
            </summary>
            <param name="isTemporal">If the regression is considered to take temporal information into account. In general, this is true if we are regressing a time series, and false if we are regressing scatter plot data</param>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.InnerStl.SeasonalComponent">
            <summary>
            The seasonal component
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.InnerStl.TrendComponent">
            <summary>
            The trend component
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.InnerStl.Residual">
            <summary>
            The left component after seasonal and trend are eliminated.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.InnerStl.Decomposition(System.Collections.Generic.IReadOnlyList{System.Double},System.Int32)">
            <summary>
            The core for the robust trend-seasonal decomposition. See the ref: http://www.wessa.net/download/stl.pdf,
            See section 2 and 3. especially section 2.
            </summary>
            <returns>Return true if the process goes successfully. Otherwise, return false.</returns>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.InnerStl.VirtualXValuesProvider">
            <summary>
            This class provides the virtual x values for multi object usage.
            The cache mechanism is used for performance consideration.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.InnerStl.VirtualXValuesProvider.GetXValues(System.Int32)">
            <summary>
            Get a list of virtual x-axis values. the values are from 0 to length - 1.
            </summary>
            <param name="length">Specify the length you want to create the x values.</param>
            <returns>If the input is cached, return the cached output directly. Otherwise, create a new list and return</returns>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.LeastSquares">
            <summary>
            This class is used to calculate the least squares of the scatterplots.
            Please check http://en.wikipedia.org/wiki/Least_squares for more details.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.LeastSquares.#ctor(System.Collections.Generic.IReadOnlyList{System.Double},System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.TimeSeries.LeastSquares"/> class.
            Constructing the least square algorithm. the input will be consumed directly without any copy, due to memory usage concern.
            </summary>
            <param name="x">The corresponding x-axis value</param>
            <param name="y">The corresponding y-axis value</param>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.LeastSquares.RegressionDegreeOneWeighted(System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            y=b0+b1x, while the penalty is weighted
            </summary>
            <param name="weights">The weighted least squares. Note that the weight should be non-negative, and equal length to data </param>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.LocalRegression">
            <summary>
            This class is used to maintain the neighbors of a given particular point.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.LocalRegression._model">
            <summary>
            The model is learned by several iterations of local weighted regression.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.LocalRegression.#ctor(System.Collections.Generic.IReadOnlyList{System.Double},System.Collections.Generic.IReadOnlyList{System.Double},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.TimeSeries.LocalRegression"/> class.
            Construct the neighborhood information of a given point. note that the input series will not be copies again, due to
            memory usage concern.
            </summary>
            <param name="x">The complete values of x-axis</param>
            <param name="y">The complete values of y-axis</param>
            <param name="selfIndex">The index of the current point</param>
            <param name="r">Number of neighbors, usually should be less then n. if it is equal/larger than n, the weight has slight change.</param>
            <param name="isTemporal">If the regression is considered to take temporal information into account. In general, this is true if we are regressing a time series, and false if we are regressing scatter plot data</param>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.LocalRegression.NeighborsY">
            <summary>
            The values of the y-axis of the neighbors (include the self point)
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.LocalRegression.NeighborsX">
            <summary>
            The values of the x-axis of the neighbors (include the self point)
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.LocalRegression.Weights">
            <summary>
            The weights for each neighbor. This is used for weighted least squares.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.LocalRegression.StartIndex">
            <summary>
            The start index of the neighbors (inclusive)
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.LocalRegression.EndIndex">
            <summary>
            The end index of the neighbors (inclusive)
            </summary>
        </member>
        <member name="P:Microsoft.ML.TimeSeries.LocalRegression.SelfIndex">
            <summary>
            The index of the self point. The index is on the complete series, not only on the neighbor series.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.LocalRegression.Y">
            <summary>
            Get the best estimated y for the current value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.LocalRegression.Y(System.Double)">
            <summary>
            Get the best estimated y for any given x-value, event not one of the observed point
            </summary>
            <param name="xValue">Any given x value</param>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.Loess">
            <summary>
            Loess is short for Robust Locally Weighted Regression and Smoothing Scatterplots.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.Loess.MinTimeSeriesLength">
            <summary>
            The minimum length of a valid time series. A time series with length equals 2 is so trivial and meaningless less than 2.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.Loess._r">
            <summary>
            The ratio to determine the local region
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.Loess._neighbors">
            <summary>
            Key is the index of the given point, value is the corresponding neighbors of the given point.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.Loess.#ctor(System.Collections.Generic.IReadOnlyList{System.Double},System.Collections.Generic.IReadOnlyList{System.Double},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.TimeSeries.Loess"/> class.
            Construct the least square algorithm specified with the number of neighbors
            </summary>
            <param name="xValues">The corresponding x-axis value</param>
            <param name="yValues">The corresponding y-axis value</param>
            <param name="isTemporal">If the regression is considered to take temporal information into account. In general, this is true if we are regressing a time series, and false if we are regressing scatter plot data</param>
            <param name="r">The smoothing range, if it is not specified, the algorithm will estimate the value of r by ratio.</param>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.Loess.Init(System.Collections.Generic.IReadOnlyList{System.Double},System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Initialize the signal with basic checking
            </summary>
            <param name="xValues">The input x-axis values</param>
            <param name="yValues">The input y-axis values</param>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.Loess.EstimateY(System.Double)">
            <summary>
            Estimate a y value by giving an x value, even if the x value is not one of the input points.
            When the x value is not one of the input points, find the closed one from input points, and use its model.
            </summary>
            <param name="xValue">find the index with value closest to the input x value.</param>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.WeightMethod">
            <summary>
            This class is used to define a set of weight functions. These functions are useful for various purposes for smoothing,
            i.e., the weighted least squares.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.WeightMethod.BisquareWeight(System.Double)">
            <summary>
            This is used for robust weight, It is one iteration step of loess.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.WeightMethod.Tricube(System.Double)">
            <summary>
            A famous weight function, since it enhances a chi-squared distributional approximation f an estimated of the error variance.
            Tricube should provide an adequate smooth in almost all situations.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.LoessConfiguration">
            <summary>
            This class is used to store the parameters which are needed for lowess algorithm.
            The name of these constansts are compliant with the original terms in paper.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.LoessConfiguration.MinimumNeighborCount">
            <summary>
            Minumum number of neighbor counts, to apply underlying regression analysis.
            This number should be even, so that neighbors on left/right side of a given data point is balanced. Unbalanced neighbors would make the local-weighted regression biased noticeably at corner cases.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.LoessConfiguration.F">
            <summary>
            (0, 1], a smooth range ratio. Let fn be the number of neighbors of a specific point.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.LoessConfiguration.T">
            <summary>
            The number of iterations for robust regression.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.MathUtility.QuickMedian(System.Collections.Generic.List{System.Double})">
            <summary>
            Use quick-sort like method to obtain the median value.
            The complexity in expectation is O(n), which is faster than using quickSort.
            </summary>
            <param name="values">The input list of values. Note that this list will be modified after calling this method</param>
            <returns>Returns the median value</returns>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.MathUtility.QuickSelect(System.Collections.Generic.IReadOnlyList{System.Double},System.Int32)">
            <summary>
            Use quick-sort like method to obtain the median value.
            The complexity in expectation is O(n), which is faster than using quickSort.
            </summary>
            <param name="values">The list of values</param>
            <param name="k">The k smallest value in the list</param>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.PolynomialModel">
            <summary>
            A general polynomial model
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeries.PolynomialModel.Y(System.Double)">
            <summary>
            This function calculates the y value by given the x value, under this model
            </summary>
            <param name="x">The specific x value</param>
        </member>
        <member name="T:Microsoft.ML.TimeSeries.LinearModel">
            <summary>
            This class calculates f(x) = b0 + b1 * x
            </summary>
        </member>
        <member name="F:Microsoft.ML.TimeSeries.LinearModel._b0">
            <summary>
            Store the coefficients in member variables for better performance.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectIidChangePoint(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)">
            <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator"/>, which predicts change points in an
            <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables">independent identically distributed (i.i.d.)</a>
            time series based on adaptive kernel density estimations and martingale scores.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The vector contains 4 elements: alert (non-zero value means a change point), raw score, p-Value and martingale score.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
            <param name="changeHistoryLength">The length of the sliding window on p-values for computing the martingale score.</param>
            <param name="martingale">The martingale used for scoring.</param>
            <param name="eps">The epsilon parameter for the Power martingale.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectIidChangePoint](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectIidChangePointBatchPrediction.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectIidChangePoint(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)">
            <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidChangePointEstimator"/>, which predicts change points in an
            <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables">independent identically distributed (i.i.d.)</a>
            time series based on adaptive kernel density estimations and martingale scores.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The vector contains 4 elements: alert (non-zero value means a change point), raw score, p-Value and martingale score.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
            <param name="changeHistoryLength">The length of the sliding window on p-values for computing the martingale score.</param>
            <param name="martingale">The martingale used for scoring.</param>
            <param name="eps">The epsilon parameter for the Power martingale.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectIidChangePoint](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectIidChangePointBatchPrediction.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectIidSpike(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide)">
            <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator"/>, which predicts spikes in
            <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables"> independent identically distributed (i.i.d.)</a>
            time series based on adaptive kernel density estimations and martingale scores.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The vector contains 3 elements: alert (non-zero value means a spike), raw score, and p-value.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
            <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
            <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectIidSpike](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectIidSpikeBatchPrediction.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectIidSpike(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide)">
            <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidSpikeEstimator"/>, which predicts spikes in
            <a href="https://en.wikipedia.org/wiki/Independent_and_identically_distributed_random_variables"> independent identically distributed (i.i.d.)</a>
            time series based on adaptive kernel density estimations and martingale scores.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The vector contains 3 elements: alert (non-zero value means a spike), raw score, and p-value.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
            <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
            <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectIidSpike](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectIidSpikeBatchPrediction.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectChangePointBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.ErrorFunction,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)">
            <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator"/>, which predicts change points in time series
            using <a href="https://en.wikipedia.org/wiki/Singular_spectrum_analysis">Singular Spectrum Analysis (SSA)</a>.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The vector contains 4 elements: alert (non-zero value means a change point), raw score, p-Value and martingale score.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
            <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
            <param name="changeHistoryLength">The size of the sliding window for computing the p-value.</param>
            <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
            <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
            <param name="martingale">The martingale used for scoring.</param>
            <param name="eps">The epsilon parameter for the Power martingale.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectChangePointBySsa](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectChangePointBySsaBatchPrediction.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectChangePointBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.ErrorFunction,Microsoft.ML.Transforms.TimeSeries.MartingaleType,System.Double)">
            <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaChangePointEstimator"/>, which predicts change points in time series
            using <a href="https://en.wikipedia.org/wiki/Singular_spectrum_analysis">Singular Spectrum Analysis (SSA)</a>.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The vector contains 4 elements: alert (non-zero value means a change point), raw score, p-Value and martingale score.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="confidence">The confidence for change point detection in the range [0, 100].</param>
            <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
            <param name="changeHistoryLength">The size of the sliding window for computing the p-value.</param>
            <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
            <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
            <param name="martingale">The martingale used for scoring.</param>
            <param name="eps">The epsilon parameter for the Power martingale.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectChangePointBySsa](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectChangePointBySsaBatchPrediction.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectSpikeBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide,Microsoft.ML.Transforms.TimeSeries.ErrorFunction)">
            <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator"/>, which predicts spikes in time series
            using <a href="https://en.wikipedia.org/wiki/Singular_spectrum_analysis">Singular Spectrum Analysis (SSA)</a>.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The vector contains 3 elements: alert (non-zero value means a spike), raw score, and p-value.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
            <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
            <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
            <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
            <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
            <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectSpikeBySsa](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectSpikeBySsaBatchPrediction.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectSpikeBySsa(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32,Microsoft.ML.Transforms.TimeSeries.AnomalySide,Microsoft.ML.Transforms.TimeSeries.ErrorFunction)">
            <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SsaSpikeEstimator"/>, which predicts spikes in time series
            using <a href="https://en.wikipedia.org/wiki/Singular_spectrum_analysis">Singular Spectrum Analysis (SSA)</a>.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The vector contains 3 elements: alert (non-zero value means a spike), raw score, and p-value.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="confidence">The confidence for spike detection in the range [0, 100].</param>
            <param name="pvalueHistoryLength">The size of the sliding window for computing the p-value.</param>
            <param name="trainingWindowSize">The number of points from the beginning of the sequence used for training.</param>
            <param name="seasonalityWindowSize">An upper bound on the largest relevant seasonality in the input time-series.</param>
            <param name="side">The argument that determines whether to detect positive or negative anomalies, or both.</param>
            <param name="errorFunction">The function used to compute the error between the expected and the observed value.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectSpikeBySsa](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectSpikeBySsaBatchPrediction.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectAnomalyBySrCnn(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Create <see cref="T:Microsoft.ML.Transforms.TimeSeries.SrCnnAnomalyEstimator"/>, which detects timeseries anomalies using SRCNN algorithm.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The vector contains 3 elements: alert (1 means anomaly while 0 means normal), raw score, and magnitude of spectual residual.</param>
            <param name="inputColumnName">Name of column to transform. The column data must be <see cref="T:System.Single"/>.</param>
            <param name="windowSize">The size of the sliding window for computing spectral residual.</param>
            <param name="backAddWindowSize">The number of points to add back of training window. No more than <paramref name="windowSize"/>, usually keep default value.</param>
            <param name="lookaheadWindowSize">The number of pervious points used in prediction. No more than <paramref name="windowSize"/>, usually keep default value.</param>
            <param name="averagingWindowSize">The size of sliding window to generate a saliency map for the series. No more than <paramref name="windowSize"/>, usually keep default value.</param>
            <param name="judgementWindowSize">The size of sliding window to calculate the anomaly score for each data point. No more than <paramref name="windowSize"/>.</param>
            <param name="threshold">The threshold to determine anomaly, score larger than the threshold is considered as anomaly. Should be in (0,1)</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectAnomalyBySrCnn](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectAnomalyBySrCnn.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectEntireAnomalyBySrCnn(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.IDataView,System.String,System.String,System.Double,System.Int32,System.Double,Microsoft.ML.TimeSeries.SrCnnDetectMode)">
            <summary>
            Create <see cref="T:Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetector"/>, which detects timeseries anomalies for entire input using SRCNN algorithm.
            </summary>
            <param name="catalog">The AnomalyDetectionCatalog.</param>
            <param name="input">Input DataView.</param>
            <param name="outputColumnName">Name of the column resulting from data processing of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The length of this vector varies depending on <paramref name="detectMode"/>.</param>
            <param name="inputColumnName">Name of column to process. The column data must be <see cref="T:System.Double"/>.</param>
            <param name="threshold">The threshold to determine an anomaly. An anomaly is detected when the calculated SR raw score for a given point is more than the set threshold. This threshold must  fall between [0,1], and its default value is 0.3.</param>
            <param name="batchSize">Divide the input data into batches to fit srcnn model.
            When set to -1, use the whole input to fit model instead of batch by batch, when set to a positive integer, use this number as batch size.
            Must be -1 or a positive integer no less than 12. Default value is 1024.</param>
            <param name="sensitivity">Sensitivity of boundaries, only useful when srCnnDetectMode is AnomalyAndMargin. Must be in [0,100]. Default value is 99.</param>
            <param name="detectMode">An enum type of <see cref="T:Microsoft.ML.TimeSeries.SrCnnDetectMode"/>.
            When set to AnomalyOnly, the output vector would be a 3-element Double vector of (IsAnomaly, RawScore, Mag).
            When set to AnomalyAndExpectedValue, the output vector would be a 4-element Double vector of (IsAnomaly, RawScore, Mag, ExpectedValue).
            When set to AnomalyAndMargin, the output vector would be a 7-element Double vector of (IsAnomaly, AnomalyScore, Mag, ExpectedValue, BoundaryUnit, UpperBoundary, LowerBoundary).
            The RawScore is output by SR to determine whether a point is an anomaly or not, under AnomalyAndMargin mode, when a point is an anomaly, an AnomalyScore will be calculated according to sensitivity setting.
            Default value is AnomalyOnly.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectEntireAnomalyBySrCnn](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectEntireAnomalyBySrCnn.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectEntireAnomalyBySrCnn(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.IDataView,System.String,System.String,Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetectorOptions)">
            <summary>
            Create <see cref="T:Microsoft.ML.TimeSeries.SrCnnEntireAnomalyDetector"/>, which detects timeseries anomalies for entire input using SRCNN algorithm.
            </summary>
            <param name="catalog">The AnomalyDetectionCatalog.</param>
            <param name="input">Input DataView.</param>
            <param name="outputColumnName">Name of the column resulting from data processing of <paramref name="inputColumnName"/>.
            The column data is a vector of <see cref="T:System.Double"/>. The length of this vector varies depending on <paramref name="options.DetectMode.DetectMode"/>.</param>
            <param name="inputColumnName">Name of column to process. The column data must be <see cref="T:System.Double"/>.</param>
            <param name="options">Defines the settings of the load operation.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[DetectEntireAnomalyBySrCnn](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectEntireAnomalyBySrCnn.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.LocalizeRootCause(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.TimeSeries.RootCauseLocalizationInput,System.Double,System.Double)">
            <summary>
            Create <see cref="T:Microsoft.ML.TimeSeries.RootCause"/>, which localizes root causes using decision tree algorithm.
            </summary>
            <param name="catalog">The anomaly detection catalog.</param>
            <param name="src">Root cause's input. The data is an instance of <see cref="T:Microsoft.ML.TimeSeries.RootCauseLocalizationInput"/>.</param>
            <param name="beta">Beta is a weight parameter for user to choose.
            It is used when score is calculated for each root cause item. The range of beta should be in [0,1].
            For a larger beta, root cause items which have a large difference between value and expected value will get a high score.
            For a small beta, root cause items which have a high relative change will get a low score.</param>
            <param name="rootCauseThreshold">A threshold to determine whether the point should be root cause. The range of this threshold should be in [0,1].
            If the point's delta is equal to or larger than rootCauseThreshold multiplied by anomaly dimension point's delta, this point is treated as a root cause. Different threshold will turn out different results. Users can choose the delta according to their data and requirments.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LocalizeRootCause](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/LocalizeRootCause.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.LocalizeRootCauses(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.TimeSeries.RootCauseLocalizationInput,System.Double,System.Double)">
            <summary>
            Outputs an ordered list of <see cref="T:Microsoft.ML.TimeSeries.RootCause"/>s. The order corresponds to which prepared cause is most likely to be the root cause.
            </summary>
            <param name="catalog">The anomaly detection catalog.</param>
            <param name="src">Root cause's input. The data is an instance of <see cref="T:Microsoft.ML.TimeSeries.RootCauseLocalizationInput"/>.</param>
            <param name="beta">Beta is a weight parameter for user to choose. It is used when score is calculated for each root cause item. The range of beta should be in [0,1]. For a larger beta, root cause point which has a large difference between value and expected value will get a high score. On the contrary, for a small beta, root cause items which has a high relative change will get a high score.</param>
            <param name="rootCauseThreshold">A threshold to determine whether the point should be root cause. The range of this threshold should be in [0,1].
            If the point's delta is equal to or larger than rootCauseThreshold multiplied by anomaly dimension point's delta, this point is treated as a root cause. Different threshold will turn out different results. Users can choose the delta according to their data and requirments.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LocalizeRootCauseMultipleDimensions](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/LocalizeRootCauseMultipleDimensions.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.DetectSeasonality(Microsoft.ML.AnomalyDetectionCatalog,Microsoft.ML.IDataView,System.String,System.Int32,System.Double)">
            <summary>
            <para>
            In time series data, seasonality (or periodicity) is the presence of variations that occur at specific regular intervals,
            such as weekly, monthly, or quarterly.
            </para>
            <para>
            This method detects this predictable interval (or period) by adopting techniques of fourier analysis.
            Assuming the input values have the same time interval (e.g., sensor data collected at every second ordered by timestamps),
            this method takes a list of time-series data, and returns the regular period for the input seasonal data,
            if a predictable fluctuation or pattern can be found that recurs or repeats over this period throughout the input values.
            </para>
            <para>
            Returns -1 if no such pattern is found, that is, the input values do not follow a seasonal fluctuation.
            </para>
            </summary>
            <param name="catalog">The detect seasonality catalog.</param>
            <param name="input">Input DataView.The data is an instance of <see cref="T:Microsoft.ML.IDataView"/>.</param>
            <param name="inputColumnName">Name of column to process. The column data must be <see cref="T:System.Double"/>.</param>
            <param name="seasonalityWindowSize">An upper bound on the number of values to be considered in the input values.
            When set to -1, use the whole input to fit model; when set to a positive integer, only the first windowSize number
            of values will be considered. Default value is -1.</param>
            <param name="randomnessThreshold"><a href ="https://en.wikipedia.org/wiki/Correlogram">Randomness threshold</a>
            that specifies how confidently the input values follow a predictable pattern recurring as seasonal data.
            The range is between [0, 1]. By default, it is set as 0.95.
            </param>
            <returns>The regular interval for the input as seasonal data, otherwise return -1.</returns>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LocalizeRootCause](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/DetectSeasonality.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TimeSeriesCatalog.ForecastBySsa(Microsoft.ML.ForecastingCatalog,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single,Microsoft.ML.Transforms.TimeSeries.RankSelectionMethod,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{Microsoft.ML.Transforms.TimeSeries.GrowthRatio},System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Singular Spectrum Analysis (SSA) model for univariate time-series forecasting.
            For the details of the model, refer to http://arxiv.org/pdf/1206.6910.pdf.
            </summary>
            <param name="catalog">Catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            The vector contains Alert, Raw Score, P-Value as first three values.</param>
            <param name="windowSize">The length of the window on the series for building the trajectory matrix (parameter L).</param>
            <param name="seriesLength">The length of series that is kept in buffer for modeling (parameter N).</param>
            <param name="trainSize">The length of series from the beginning used for training.</param>
            <param name="horizon">The number of values to forecast.</param>
            <param name="isAdaptive">The flag determing whether the model is adaptive.</param>
            <param name="discountFactor">The discount factor in [0,1] used for online updates.</param>
            <param name="rankSelectionMethod">The rank selection method.</param>
            <param name="rank">The desired rank of the subspace used for SSA projection (parameter r). This parameter should be in the range in [1, windowSize].
            If set to null, the rank is automatically determined based on prediction error minimization.</param>
            <param name="maxRank">The maximum rank considered during the rank selection process. If not provided (i.e. set to null), it is set to windowSize - 1.</param>
            <param name="shouldStabilize">The flag determining whether the model should be stabilized.</param>
            <param name="shouldMaintainInfo">The flag determining whether the meta information for the model needs to be maintained.</param>
            <param name="maxGrowth">The maximum growth on the exponential trend.</param>
            <param name="confidenceLowerBoundColumn">The name of the confidence interval lower bound column. If not specified then confidence intervals will not be calculated.</param>
            <param name="confidenceUpperBoundColumn">The name of the confidence interval upper bound column. If not specified then confidence intervals will not be calculated.</param>
            <param name="confidenceLevel">The confidence level for forecasting.</param>
            <param name="variableHorizon">Set this to true if horizon will change after training(at prediction time).</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Forecasting](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/Forecasting.cs)]
            [!code-csharp[ForecastingWithConfidenceInterval](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/TimeSeries/ForecastingWithConfidenceInterval.cs)]
            ]]>
            </format>
            </example>
        </member>
    </members>
</doc>
